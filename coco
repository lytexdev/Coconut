#!/bin/bash

MODULES_JSON_PATH="./coconut-shell/src/core_modules.json"
CUSTOM_MODULES_JSON_PATH="./coconut-shell/src/custom_modules.json"
COMPONENTS_DIR="./coconut-shell/src/components/modules"
CUSTOM_MODULES_DIR="./custom_modules"

# Determine whether to use python3 or python
PYTHON_CMD="python3"
if ! command -v python3 &> /dev/null; then
    if command -v python &> /dev/null; then
        PYTHON_CMD="python"
    else
        echo "Neither python3 nor python found. Please install Python."
        exit 1
    fi
fi

run_install_script() {
    cd ./coconut-shell || exit
    if ! npm install; then
        echo "Error during npm install."
        exit 1
    else
        echo "npm dependencies installed successfully."
    fi
    cd ..

    run_build_script

    if ! command -v "$PYTHON_CMD" &> /dev/null; then
        echo "Python could not be found"
        exit 1
    fi

    if ! command -v pip3 &> /dev/null; then
        if ! command -v pip &> /dev/null; then
            echo "pip for Python could not be found"
            exit 1
        fi
    fi

    if [ -d ".venv" ]; then
        echo "Virtual environment already exists."
    else
        "$PYTHON_CMD" -m venv .venv
    fi

    source .venv/bin/activate

    if ! pip install -r requirements.txt; then
        echo "Error during pip install."
        deactivate
        exit 1
    else
        echo "Python dependencies installed successfully."
    fi

    deactivate

    generate_secret_key() {
        "$PYTHON_CMD" -c "import os; print(os.urandom(24).hex())"
    }

    if [ ! -f ".env" ]; then
        cp .env.example .env
        SECRET_KEY=$(generate_secret_key)
        sed -i "s/^SECRET_KEY=.*/SECRET_KEY=\"$SECRET_KEY\"/" .env
        echo ".env file created from .env.example with a random SECRET_KEY."
    else
        echo ".env file already exists."
    fi

    source .venv/bin/activate

    create_db

    echo "Installation completed successfully!"
}

create_module() {
    local name=$1
    local component=$2
    local enum=$(echo "$component" | tr '[:lower:]' '[:upper:]')
    local module_folder=$(echo "$component" | tr '[:upper:]' '[:lower:]')

    if [[ -z "$name" || -z "$component" ]]; then
        echo "Usage: coco create module <name> <component>"
        exit 1
    fi

    # Add the new module to custom_modules.json using Python
    "$PYTHON_CMD" - <<EOF
import json
module = {"enum": "$enum", "component": "$component", "text": "$name"}

with open("$CUSTOM_MODULES_JSON_PATH", "r+") as f:
    data = json.load(f)
    data["modules"].append(module)
    f.seek(0)
    json.dump(data, f, indent=4)
EOF

    if [ $? -ne 0 ]; then
        echo "Error updating custom_modules.json"
        exit 1
    fi

    COMPONENT_FILE_PATH="$COMPONENTS_DIR/$component.vue"
    if [ ! -f "$COMPONENT_FILE_PATH" ]; then
        cat <<EOL > "$COMPONENT_FILE_PATH"
<template>
    <div class="panel-module">
        <h2>$name Component</h2>
    </div>
</template>

<script setup lang="ts">
console.log('$name component loaded');
</script>

<style scoped>
/* 
Add your styles here or create a new SCSS file to use variables and import it at app.scss.
*/
</style>
EOL
        echo "Component file $COMPONENT_FILE_PATH created successfully."
    else
        echo "Component file $COMPONENT_FILE_PATH already exists."
    fi

    # Create the custom module folder and init file
    MODULE_DIR_PATH="$CUSTOM_MODULES_DIR/$module_folder"
    if [ ! -d "$MODULE_DIR_PATH" ]; then
        mkdir -p "$MODULE_DIR_PATH"
        cat <<EOL > "$MODULE_DIR_PATH/__init__.py"
from flask import Blueprint

${module_folder}_bp = Blueprint('${module_folder}', __name__)

@${module_folder}_bp.route('/custom-path')
def index():
    return "Hello from the $name module!"
EOL
        echo "Custom module $module_folder created successfully."
    else
        echo "Custom module $module_folder already exists."
    fi

    source .venv/bin/activate
    update_modules
}

update_modules() {
    flask db migrate -m "Update modules"
    flask db upgrade
    
    "$PYTHON_CMD" <<EOF
import json
from app import app  # Import the Flask app
from models import db
from models.module import Module, ModuleEnum

def sync_modules():
    with app.app_context():
        with open("$MODULES_JSON_PATH") as f:
            modules_config = json.load(f)
        
        with open("$CUSTOM_MODULES_JSON_PATH") as f:
            custom_modules_config = json.load(f)
        
        all_modules = modules_config["modules"] + custom_modules_config["modules"]

        existing_modules = {module.name.name for module in Module.query.all()}
        new_modules = {module["enum"] for module in all_modules}
        
        for module in all_modules:
            if module["enum"] not in existing_modules:
                new_module = Module(
                    name=ModuleEnum[module["enum"]],
                    enabled=True,
                    order=module.get("order", len(existing_modules) + 1)
                )
                db.session.add(new_module)
        
        for module in all_modules:
            if module["enum"] in existing_modules:
                existing_module = Module.query.filter_by(name=ModuleEnum[module["enum"]]).first()
                existing_module.order = module.get("order", existing_module.order)
                db.session.add(existing_module)
        
        db.session.commit()

sync_modules()
print("Modules synchronized successfully.")
EOF
}

create_db() {
    flask db init
    flask db migrate -m "Initial migration"
    flask db upgrade
    echo "Database created successfully."
}

reset_db() {
    rm -f migrations/versions/*.py
    rm -f app.db
    source .venv/bin/activate
    create_db
}

update_coconut() {
    git pull origin main
    run_install_script
    echo "Coconut updated successfully."
}

run_build_script() {
    cd ./coconut-shell || exit
    if ! npm run build; then
        echo "Error during npm run build:"
        exit 1
    else
        echo "npm run build completed successfully."
    fi
    cd ..

    src_images_folder="./coconut-shell/src/assets/images"
    dist_images_folder="./coconut-shell/dist/assets/images"

    if [ -d "$src_images_folder" ];then
        mkdir -p "$dist_images_folder"
        cp -r "$src_images_folder/"* "$dist_images_folder/"
    fi

    dist_folder="./coconut-shell/dist/assets"
    static_folder="./static/assets"

    mkdir -p "$static_folder"

    find "$dist_folder" -type f | while read -r file; do
        relative_path="${file#$dist_folder/}"
        new_file_path="$static_folder/$relative_path"

        if [[ $file == *.css ]]; then
            new_file_path="$static_folder/main.css"
        elif [[ $file == *.js ]]; then
            new_file_path="$static_folder/main.js"
        fi

        mkdir -p "$(dirname "$new_file_path")"
        echo "Moving $file to $new_file_path"
        mv "$file" "$new_file_path"
    done

    rm -rf "$dist_folder"
    echo -e "Frontend build completed successfully!"
}

print_help() {
    echo ""
    echo "Coco - Coconut CLI"
    echo "Usage: $0 {create module <name> <component>|update db|build|install|create db|reset db|update}"
    echo
    echo "Commands:"
    echo "  run                                     Run the Server"
    echo "  install                                 Install Coconut"
    echo "  build                                   Build the frontend"
    echo "  update                                  Update Coconut from the repository"
    echo "  update db                               Update the database with new modules"
    echo "  create module <name> <component>        Create a new module"
    echo "  create db                               Create the database"
    echo "  reset db                                Reset the database"
    echo ""
}

run_server() {
    source .venv/bin/activate
    "$PYTHON_CMD" app.py
}

case "$1" in
    build)
        run_build_script
        ;;
    install)
        run_install_script
        ;;
    create)
        if [[ "$2" == "module" ]]; then
            create_module "$3" "$4"
        elif [[ "$2" == "db" ]]; then
            create_db
        else
            echo "Usage: ./coco create {module <name> <component>|db}"
            exit 1
        fi
        ;;
    update)
        if [[ "$2" == "db" ]]; then
            update_modules
        else
            update_coconut
        fi
        ;;
    reset)
        if [[ "$2" == "db" ]]; then
            reset_db
        else
            echo "Usage: ./coco reset db"
            exit 1
        fi
        ;;
    run)
        run_server
        ;;
    *)
        print_help
        exit 1
        ;;
esac
